#!/bin/bash
################################################################################
# System test suite

TRACE_LOG=${TEST_LOG:-/var/log/kvsns_tests_trace.log}

## Trace for exits
log_exit() {
    echo "Exit with $1"
    exit "$1"
}

log_debug() {
    echo "DEBUG: $*" >> $TRACE_LOG
}

log_error() {
    echo "ERROR: $*" >> $TRACE_LOG
}

## Trace for binary executables
log_exec_bin() {
    log_debug "exec >>> ($*)"
    $@ >> $TRACE_LOG 2>&1
    local rc=$?
    log_debug "exec <<< ($rc)"
    return $rc
}

log_exec_bin_grab_stdout() {
    log_debug "exec >>> ($*)"
    $@ 2>> $TRACE_LOG
    local rc=$?
    log_debug "exec <<< ($rc)"
    return $rc
}

## Evaluate given expressions and put non-zero return code
## thought to the caller.
exec_ok() {
    # printf "EXEC: $@"
    $@
    local rc=$?
    # printf " ... %d\n" $rc
    if (( rc != 0 )) ; then
        printf "Command %s failed with %d\n" "$*" $rc
    fi
    return $rc
}

exec_fail() {
    $@
    local rc=$?
    if (( rc == 0 )); then
        printf "Command %s failed (expected non-zero code)\n" "$*"
        $rc=1
    fi
    return $rc
}

## Wrapper for setting up calls
test_setup() {
    exec_ok $@
    local rc=$?
    if (( rc != 0 )) ; then
        printf "Failed to setup test\n"
        log_exit $rc
    fi
}

## Wrapper for calls which clean up stuff
test_teardown() {
    exec_ok $@
    local rc=$?
    if (( rc != 0)) ; then
        echo "Failed to teardown test"
        exit $rc
    fi
}

## Evaluate expression and fail tests if non-zero code was returned
test_verify_ok() {
    exec_ok $@
    local rc=$?
    if (( rc != 0 )) ; then
        echo "Test falied"
        exit $rc
    fi
}

test_verify_fail() {
    exec_fail $@
    local rc=$?
    if (( rc == 0 )) ; then
        echo "Test falied (expecred non-zero code)"
        exit $rc
    fi
}

################################################################################
KVS_TRACE=${KVS_TRACE:-0}

if (( $KVS_TRACE == 0 )) ;then
    KVS_TRACE_LOG=/dev/null
else
    KVS_TRACE_LOG=$TRACE_LOG
fi

clovis_exec() {
    local kvsns_ini="/etc/kvsns.d/kvsns.ini"
    # TODO: 5 awk calls is overkill, use a single awk script here or
    # add a special binary for create/drop calls.
    local local_addr=$(awk '/local_addr/ { print $3; }' $kvsns_ini)
    local ha_addr=$(awk '/ha_addr/ { print $3; }' $kvsns_ini)
    local proc_fid=$(awk '/proc_fid/ { print $3; }' $kvsns_ini)
    local profile=$(awk '/profile/ { print $3; }' $kvsns_ini)
    local kvs_fid=$(awk '/kvs_fid/ { print $3; }' $kvsns_ini)
    local CMD="m0clovis -l $local_addr -h $ha_addr -p $profile -f $proc_fid $* $kvs_fid"

    log_exec_bin $CMD
}

kvs_create_index() {
    clovis_exec index create >> $KVS_TRACE_LOG 2>&1
}

kvs_drop_index() {
    clovis_exec index drop >> $KVS_TRACE_LOG 2>&1
}

kvs_reset_index() {
    kvs_drop_index
    kvs_create_index
}

################################################################################
# Cleanup the underlying storage
kvsns_prepare_clean_index() {
    kvs_reset_index
    kvsns_init_cmd
}

kvsns_index_teardown() {
    kvs_drop_index
}

kvsns_index_setup() {
    kvs_create_index
    kvsns_init_cmd
}

################################################################################
# KVSNS helpers

KVSNS_ROOT_INODE="2"

## FIXME: ignores $DIR argument
kvsns_create_cmd() {
    local DIR=$1
    local FNAME=$2
    local BIN=$KVSNS_SHELL_DIR/kvsns_create
    local CMD="$BIN $FNAME"

    log_exec_bin "$CMD"
}

## FIXME: ignores $DIR argument
kvsns_lookup_cmd() {
    local DIR=$1
    local FNAME=$2
    local BIN=$KVSNS_SHELL_DIR/kvsns_lookup
    local CMD="$BIN $FNAME"

    log_exec_bin "$CMD"
}

## FIXME: ignores $DIR arguments and uses the root ino (2) instead
kvsns_rename_cmd() {
    local S_DIR=$1
    local S_FNAME=$2
    local D_DIR=$3
    local D_FNAME=$4
    local BIN=$KVSNS_SHELL_DIR/kvsns_rename
    local CMD="$BIN 2 $S_FNAME 2 $D_FNAME"

    log_exec_bin "$CMD"
}

## FIXME: ignores $DIR argument
kvsns_unlink_cmd() {
    local DIR=$1
    local FNAME=$2
    local BIN=$KVSNS_SHELL_DIR/kvsns_del
    local CMD="$BIN $FNAME"

    log_exec_bin "$CMD"
}

kvsns_mkdir_cmd() {
    local PARENT_INO=$1
    local DNAME=$2
    local BIN=$KVSNS_SHELL_DIR/kvsns2_mkdir
    local CMD="$BIN $PARENT_INO $DNAME"

    log_exec_bin "$CMD"
}

# Execute readdir and get list of filenames
kvsns_readdir_getlist_cmd() {
    local PARENT=$1
    local BIN=$KVSNS_SHELL_DIR/kvsns_readdir
    local CMD="$BIN $PARENT"
    local CMD_PATTERN="READDIR"

    log_exec_bin_grab_stdout "$CMD" | awk '/READDIR:/ { print $3; }'
}

kvsns_readdir_cmd() {
    local PARENT=$1
    local BIN=$KVSNS_SHELL_DIR/kvsns_readdir
    local CMD="$BIN $PARENT"

    log_exec_bin "$CMD"
}

kvsns_init_cmd() {
    $KVSNS_SHELL_DIR/kvsns_init >> $TRACE_LOG 2>&1
}

################################################################################
